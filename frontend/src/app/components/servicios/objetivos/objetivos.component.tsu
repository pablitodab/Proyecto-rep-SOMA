import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { HeaderComponent } from '../header/header.component';
import { FooterComponent } from '../footer/footer.component';
import { ObjetivoService } from '../../../services/objetivo.service';

interface Objetivo {
    id?: number;
    nombre: string;
    descripcion?: string;  // AÑADIDO
    fechaFin: string;
    importancia: 'alta' | 'media' | 'baja';
    cumplido: boolean;
}

@Component({
    selector: 'app-objetivos',
    standalone: true,
    imports: [FormsModule, CommonModule, HeaderComponent, FooterComponent],
    templateUrl: './objetivos.component.html',
    styleUrls: ['./objetivos.component.css']
})
export class ObjetivosComponent implements OnInit {
    objetivos: Objetivo[] = [];
    nuevoObjetivo: Objetivo = {
        nombre: '',
        descripcion: '',  // AÑADIDO
        fechaFin: '',
        importancia: 'media',
        cumplido: false
    };
    editando = false;
    objetivoEditId?: number;

    constructor(private objetivoService: ObjetivoService) {}

    ngOnInit(): void {
        this.cargarObjetivos();
    }

    cargarObjetivos(): void {
        this.objetivoService.getAll().subscribe({
            next: (data) => {
                console.log('Objetivos cargados:', data);
                this.objetivos = data;
            },
            error: (err) => this.mostrarError(err)
        });
    }

    agregarObjetivo(): void {
        if (!this.nuevoObjetivo.nombre || !this.nuevoObjetivo.fechaFin) {
            alert('Nombre y fecha límite son obligatorios');
            return;
        }

        if (this.editando && this.objetivoEditId) {
            this.objetivoService.update(this.objetivoEditId, this.nuevoObjetivo)
                .subscribe({
                    next: () => this.resetFormulario(),
                    error: (err) => this.mostrarError(err)
                });
        } else {
            this.objetivoService.create(this.nuevoObjetivo)
                .subscribe({
                    next: () => this.resetFormulario(),
                    error: (err) => this.mostrarError(err)
                });
        }
    }

    editarObjetivo(objetivo: Objetivo): void {
        this.editando = true;
        this.objetivoEditId = objetivo.id;
        this.nuevoObjetivo = { ...objetivo };
    }

    marcarCumplido(id: number): void {
        this.objetivoService.toggleCumplido(id).subscribe({
            next: () => this.cargarObjetivos(),
            error: (err) => this.mostrarError(err)
        });
    }

    eliminarObjetivo(id: number): void {
        if (confirm('¿Estás seguro de eliminar este objetivo?')) {
            this.objetivoService.delete(id).subscribe({
                next: () => this.cargarObjetivos(),
                error: (err) => this.mostrarError(err)
            });
        }
    }

    public resetFormulario(): void {
        this.nuevoObjetivo = { 
            nombre: '', 
            descripcion: '',  // AÑADIDO
            fechaFin: '', 
            importancia: 'media', 
            cumplido: false 
        };
        this.editando = false;
        this.objetivoEditId = undefined;
        this.cargarObjetivos();
    }

    private mostrarError(err: any): void {
        console.error(err);
        alert(err.error?.message || 'Error en la operación');
    }
}
